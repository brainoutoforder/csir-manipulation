<launch>

  <arg name="kinect_camera_name" default="wam_base_kinect" />

  <!-- load perception -->
  <include file="$(find wam_object_manipulation_launch)/launch/kinect-perception.launch">
    <arg name="kinect_camera_name" value="$(arg kinect_camera_name)"/>
  </include>

  <!-- load planning -->
  <include file="$(find csir_wam_arm_navigation)/launch/ompl_planning.launch"/>

  <!-- warehouse database node -->
  <param name="warehouse_host" value="localhost"/>
  <param name="warehouse_port" value="27021"/>
  <node name="mongo" type="wrapper.py" pkg="mongodb">
    <param name="overwrite" value="false"/>
    <param name="database_path" value="arm_navigation_dbs/csir_wam"/>
  </node>
 
  <!-- move arm -->
  <include file="$(find csir_wam_arm_navigation)/launch/move_arm.launch"/>

  <!-- monitor -->
  <!-- ? add substitute for move_arm_head_monitor -->
  <!-- but head_monitor does not seem to publish a collision map -->
  <!-- ADD FJTAS node here  (+ joint state agglomerator) -->
  <node pkg="wam_controllers" type="wam_joint_pub.py" name="wam_joint_pub" output="screen"/>
  <node pkg="wam_controllers" type="wam_follow_joint_trajectory_controller.py" name="wam_follow_joint_controller" output="screen"/>

  <!-- Publish robot transforms -->
  <node pkg="robot_state_publisher" type="state_publisher" name="robot_state_publisher"/>

  <!-- load planning environment - environment_server and planning_scene_validity_server -->
  <include file="$(find planning_environment)/launch/environment_server.launch">
    <arg name="use_monitor" value="true"/>
    <arg name="use_collision_map" value="true"/>
  </include>
 
  <!-- trajectory filter -->
  <include file="$(find csir_wam_arm_navigation)/launch/trajectory_filter_server.launch"/>
  <param name="trajectory_filter/object_padd" value="0.04"/>

  <!-- load IK -->
  <include file="$(find csir_wam_arm_navigation)/launch/constraint_aware_kinematics.launch"/>
  <param name="csir_wam_arm_kinematics/object_padd" value="0.04"/>

  <!-- interpolated IK -->
  <node name="interpolated_ik_node" pkg="interpolated_ik_motion_planner" 
  type="interpolated_ik_motion_planner.py" respawn="false" output="screen">

    <!--launch-prefix="xterm -e python -m pdb"-->
    <param name="robot_prefix" type="string" value="csir_wam"/>
    <param name="consistent_angle" type="double" value="1.05"/>
  </node>

  <!-- joint trajectory normalization -->
  <include file="$(find trajectory_filter_server)/launch/trajectory_unnormalize.launch"/>

</launch>
