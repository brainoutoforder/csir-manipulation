diff -ruN object_manipulation/household_objects_database/nodes/objects_database_node.cpp /home/jkizito/fuerte_workspace/sandbox/object_manipulation/household_objects_database/nodes/objects_database_node.cpp
--- object_manipulation/household_objects_database/nodes/objects_database_node.cpp	2014-03-28 13:09:57.236404624 +0200
+++ object_manipulation/household_objects_database/nodes/objects_database_node.cpp	2014-03-11 12:25:38.503007359 +0200
@@ -350,6 +350,7 @@
 
     HandDescription hd;
     int model_id = target.potential_models[0].model_id;
+    ROS_INFO("Database model_id: %d", model_id);
     std::string hand_id = hd.handDatabaseName(arm_name);
     
     //retrieve the raw grasps from the database
@@ -390,38 +391,38 @@
 
       if (hand_id != "WILLOW_GRIPPER_2010")
       {
-	//check that the number of joints in the ROS description of this hand
-	//matches the number of values we have in the database
-	if (joint_names.size() != (*it)->final_grasp_posture_.get().joint_angles_.size())
-	{
-	  ROS_ERROR("Database grasp specification does not match ROS description of hand. "
-		    "Hand is expected to have %d joints, but database grasp specifies %d values", 
-		    (int)joint_names.size(), (int)(*it)->final_grasp_posture_.get().joint_angles_.size());
-	  continue;
-	}
-	//for now we silently assume that the order of the joints in the ROS description of
-	//the hand is the same as in the database description
-	grasp.pre_grasp_posture.name = joint_names;
-	grasp.grasp_posture.name = joint_names;
-	grasp.pre_grasp_posture.position = (*it)->pre_grasp_posture_.get().joint_angles_;
-	grasp.grasp_posture.position = (*it)->final_grasp_posture_.get().joint_angles_;	
+        //check that the number of joints in the ROS description of this hand
+        //matches the number of values we have in the database
+        if (joint_names.size() != (*it)->final_grasp_posture_.get().joint_angles_.size())
+        {
+          ROS_ERROR("Database grasp specification does not match ROS description of hand. "
+              "Hand is expected to have %d joints, but database grasp specifies %d values", 
+              (int)joint_names.size(), (int)(*it)->final_grasp_posture_.get().joint_angles_.size());
+          continue;
+        }
+        //for now we silently assume that the order of the joints in the ROS description of
+        //the hand is the same as in the database description
+        grasp.pre_grasp_posture.name = joint_names;
+        grasp.grasp_posture.name = joint_names;
+        grasp.pre_grasp_posture.position = (*it)->pre_grasp_posture_.get().joint_angles_;
+        grasp.grasp_posture.position = (*it)->final_grasp_posture_.get().joint_angles_;	
       }
       else
       {
-	//unfortunately we have to hack this, as the grasp is really defined by a single
-	//DOF, but the urdf for the PR2 gripper is not well set up to do that
-	if ( joint_names.size() != 4 || (*it)->final_grasp_posture_.get().joint_angles_.size() != 1)
-	{
-	  ROS_ERROR("PR2 gripper specs and database grasp specs do not match expected values");
-	  continue;
-	}
-	grasp.pre_grasp_posture.name = joint_names;
-	grasp.grasp_posture.name = joint_names;
-	//replicate the single value from the database 4 times
-	grasp.pre_grasp_posture.position.resize( joint_names.size(), 
-						 (*it)->pre_grasp_posture_.get().joint_angles_.at(0));
-	grasp.grasp_posture.position.resize( joint_names.size(), 
-					     (*it)->final_grasp_posture_.get().joint_angles_.at(0));
+        //unfortunately we have to hack this, as the grasp is really defined by a single
+        //DOF, but the urdf for the PR2 gripper is not well set up to do that
+        if ( joint_names.size() != 4 || (*it)->final_grasp_posture_.get().joint_angles_.size() != 1)
+        {
+          ROS_ERROR("PR2 gripper specs and database grasp specs do not match expected values");
+          continue;
+        }
+        grasp.pre_grasp_posture.name = joint_names;
+        grasp.grasp_posture.name = joint_names;
+        //replicate the single value from the database 4 times
+        grasp.pre_grasp_posture.position.resize( joint_names.size(), 
+                  (*it)->pre_grasp_posture_.get().joint_angles_.at(0));
+        grasp.grasp_posture.position.resize( joint_names.size(), 
+                    (*it)->final_grasp_posture_.get().joint_angles_.at(0));
       }
       //for now the effort is not in the database so we hard-code it in here
       //this will change at some point
@@ -432,8 +433,12 @@
       grasp.min_approach_distance = 0.05;
       //the pose of the grasp
       grasp.grasp_pose = (*it)->final_grasp_pose_.get().pose_;
+      ROS_INFO_STREAM("object pose    " << "(x:" << target.potential_models[0].pose.pose.position.x << ", y:" << target.potential_models[0].pose.pose.position.y << ", z:" << target.potential_models[0].pose.pose.position.z << "); (w:" << target.potential_models[0].pose.pose.orientation.w << ", x:" << target.potential_models[0].pose.pose.orientation.x << ", y:" << target.potential_models[0].pose.pose.orientation.y << ", z:" << target.potential_models[0].pose.pose.orientation.z);//DB
+      ROS_INFO_STREAM("hand pose [db] " << "(x:" << grasp.grasp_pose.position.x << ", y:" << grasp.grasp_pose.position.y << ", z:" << grasp.grasp_pose.position.z << "); (w:" << grasp.grasp_pose.orientation.w << ", x:" << grasp.grasp_pose.orientation.x << ", y:" << grasp.grasp_pose.orientation.y << ", z:" << grasp.grasp_pose.orientation.z);//DB
       //convert it to the frame of the detection
       grasp.grasp_pose = multiplyPoses(target.potential_models[0].pose.pose, grasp.grasp_pose);
+      ROS_INFO_STREAM("hand pose      " << "(x:" << grasp.grasp_pose.position.x << ", y:" << grasp.grasp_pose.position.y << ", z:" << grasp.grasp_pose.position.z << "); (w:" << grasp.grasp_pose.orientation.w << ", x:" << grasp.grasp_pose.orientation.x << ", y:" << grasp.grasp_pose.orientation.y << ", z:" << grasp.grasp_pose.orientation.z);//DB
+      ROS_INFO_STREAM("target header frame: " << target.potential_models[0].pose.header.frame_id << ", target reference frame: " << target.reference_frame_id);
       //and then finally to the reference frame of the object
       if (target.potential_models[0].pose.header.frame_id !=
           target.reference_frame_id)
diff -ruN object_manipulation/object_manipulator/src/tools/mechanism_interface.cpp /home/jkizito/fuerte_workspace/sandbox/object_manipulation/object_manipulator/src/tools/mechanism_interface.cpp
--- object_manipulation/object_manipulator/src/tools/mechanism_interface.cpp	2014-03-28 13:09:50.748404487 +0200
+++ object_manipulation/object_manipulator/src/tools/mechanism_interface.cpp	2014-03-07 13:38:45.473143387 +0200
@@ -729,8 +729,8 @@
   {
     move_arm_goal.motion_plan_request.goal_constraints.joint_constraints[i].joint_name = joint_names.at(i);
     move_arm_goal.motion_plan_request.goal_constraints.joint_constraints[i].position = desired_joint_values[i];
-    move_arm_goal.motion_plan_request.goal_constraints.joint_constraints[i].tolerance_below = .08;
-    move_arm_goal.motion_plan_request.goal_constraints.joint_constraints[i].tolerance_above = .08;
+    move_arm_goal.motion_plan_request.goal_constraints.joint_constraints[i].tolerance_below = 0.2;/*!< @todo adjust tolerances per joint based on empirical uncertainty */
+    move_arm_goal.motion_plan_request.goal_constraints.joint_constraints[i].tolerance_above = 0.2;
   }
   
   bool success = false;
